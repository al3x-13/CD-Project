package cd.project.frontend.soap;

import jakarta.xml.ws.BindingProvider;
import jakarta.xml.ws.handler.MessageContext;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;

import java.util.*;

public class TestClient {
    public static void main(String[] args) {
        JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();

        // Use the URL defined in the soap address portion of the WSDL
        factory.setAddress("http://localhost:8080/frontend/soap/auth");

        // Utilize the class which was auto-generated by Apache CXF wsdl2java
        factory.setServiceClass(Authentication.class);

        Authentication service = (Authentication) factory.create();
        Map<String, Object> requestCtx = ((BindingProvider) service).getRequestContext();

        try {
            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.print("client# ");
                String input = scanner.nextLine();

                if (Objects.equals(input, "exit") || Objects.equals(input, "quit")) {
                    return;
                }

                System.out.println(execute(service, requestCtx, input));
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
    }

    private static String execute(Authentication service, Map<String, Object> requestCtx, String command) {
        switch (command) {
            case "login":
                String sessionToken = service.authenticate("john", "john");
                if (sessionToken == null) return "FAILURE";
                setAuthHeader(requestCtx, sessionToken);

                // TODO: debug
                System.out.println("HEADERS: " + requestCtx.get(MessageContext.HTTP_REQUEST_HEADERS));

                return "SUCCESS";
            default:
                return "U dumb?!";
        }
    }

    private static void setAuthHeader(Map<String, Object> requestCtx, String sessionToken) {
        Map<String, List<String>> headers = new HashMap<>();
        headers.put("Authorization", Collections.singletonList("Bearer " + sessionToken));
        requestCtx.put(MessageContext.HTTP_REQUEST_HEADERS, headers);
    }
}
